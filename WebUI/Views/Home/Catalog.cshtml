@model List<WebApi.Models.ServiceCatalog>
@using Microsoft.AspNetCore.Mvc.Localization
@using System.Globalization
@inject IViewLocalizer Localizer

@{
    ViewData["Title"] = Localizer["Каталог"]; // Локализованный заголовок страницы
}

<div class="container my-5">
    <div class="row justify-content-center">
        <div class="col-lg-10">
            <h1 class="display-4 text-center mb-5 text-white bg-dark p-3 rounded">@ViewData["Title"]</h1>

            <div class="card shadow-lg p-4 mb-5 border-0 rounded-3">
                <div class="card-body">
                    <p class="lead text-center text-muted mb-4">
                        @Localizer["Описание Каталога"]
                    </p>

                    @* Отображение сообщения об ошибке, если есть *@
                    @if (ViewData["ErrorMessage"] != null)
                    {
                        <div class="alert alert-danger" role="alert">
                            @ViewData["ErrorMessage"]
                        </div>
                    }

                    <div class="row mb-4 g-3 align-items-center">
                        @* Добавил g-3 для отступов между колонками/строками *@
                        <div class="col-12 col-md-6">
                            @* Полная ширина на маленьких экранах, половина на средних и выше *@
                            <label for="searchInput" class="form-label visually-hidden">@Localizer["Местозаполнитель поиска"]</label> @* Добавил скрытый лейбл для доступности *@
                            <div class="input-group input-group-lg">
                                <input type="text" id="searchInput" class="form-control" placeholder="@Localizer["Местозаполнитель поиска"]" aria-label="@Localizer["МестозаполнительПоиска"]">
                                <button class="btn btn-primary" type="button" id="button-search">
                                    <i class="fas fa-search me-2"></i> @Localizer["Поиск"]
                                </button>
                            </div>
                        </div>
                        <div class="col-12 col-md-6">
                            @* Полная ширина на маленьких экранах, половина на средних и выше *@
                            <div class="d-flex flex-column flex-sm-row justify-content-md-end gap-2">
                                @* flex-sm-row для ряда на маленьких экранах, gap-2 для отступов *@
                                <label for="categoryFilter" class="form-label visually-hidden">@Localizer["Все категории"]</label>
                                <select id="categoryFilter" class="form-select form-select-lg flex-grow-1">
                                    @* flex-grow-1, чтобы занимал доступное пространство *@
                                    <option value="all" selected>@Localizer["Все Категории"]</option>
                                    <option value="механический ремонт">@Localizer["Категория механический ремонт"]</option>
                                    <option value="производственные услуги">@Localizer["Категория производственные услуги"]</option>
                                    <option value="электрооборудование">@Localizer["Категория электрооборудование"]</option>
                                    <option value="запчасти и материалы">@Localizer["Категория запчасти материалы"]</option>
                                    <option value="промышленное оборудование">@Localizer["Категория промышленное оборудование"]</option>
                                </select>
                                <label for="sortOrder" class="form-label visually-hidden">@Localizer["СортироватьПо"]</label>
                                <select id="sortOrder" class="form-select form-select-lg flex-grow-1">
                                    @* flex-grow-1, чтобы занимал доступное пространство *@
                                    <option value="default" selected>@Localizer["Сортировать по"]</option>
                                    <option value="name_asc">@Localizer["Сортировать по имени возр"]</option>
                                    <option value="name_desc">@Localizer["Сортировать по имени убыв"]</option>
                                    <option value="date_new">@Localizer["Сортировать по новизне"]</option>
                                </select>
                            </div>
                        </div>
                    </div>

                    <div id="serviceList" class="row row-cols-1 row-cols-sm-2 row-cols-md-2 row-cols-lg-3 g-4">
                        @if (Model != null && Model.Any())
                        {
                            @foreach (var item in Model)
                            {
                                <div class="col service-card"
                                     data-service-name="@item.ServiceName.ToLower()"
                                     data-service-price="@item.Price"
                                     data-service-id="@item.Id"
                                     data-service-category="@item.Category.ToLower()"
                                     data-service-created-at="@item.CreatedAt.ToString("o")">
                                    <div class="card h-100 shadow-sm border-0 transform-on-hover">
                                        <img src="@(string.IsNullOrEmpty(item.ImageUrl) ? Url.Content("~/images/logo.png") : item.ImageUrl)" class="card-img-top" alt="@item.ServiceName">
                                        <div class="card-body d-flex flex-column">
                                            <h5 class="card-title text-dark">@item.ServiceName</h5>
                                            <ul class="list-unstyled small text-muted mb-2">
                                                <li><i class="fas fa-dollar-sign"></i> @Localizer["Цена"]: @item.Price.ToString("C", new CultureInfo("be-BY"))</li>
                                                @if (!string.IsNullOrEmpty(item.Category))
                                                {
                                                    <li><i class="fas fa-tag"></i> @Localizer[item.Category]</li>
                                                }
                                            </ul>
                                            <div class="d-flex justify-content-between align-items-center mt-auto flex-wrap">
                                                <a asp-action="ServiceDetails" asp-controller="Home" asp-route-id="@item.Id" class="btn btn-outline-primary me-2 catalog-btn">
                                                    <i class="fas fa-info-circle"></i> @Localizer["Узнать больше"]
                                                </a>
                                                <a asp-controller="Client" asp-action="PlaceOrder" asp-route-serviceId="@item.Id" class="btn btn-success catalog-btn">
                                                    <i class="fas fa-shopping-cart"></i> @Localizer["Оформить заказ"]
                                                </a>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="col-12 text-center py-5">
                                <p class="lead text-muted">@Localizer["Нет доступных услуг"]</p>
                            </div>
                        }
                    </div>

                    <nav aria-label="Пагинация" class="mt-5">
                        <ul class="pagination justify-content-center" id="paginationControls">
                        </ul>
                    </nav>

                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const searchInput = document.getElementById('searchInput');
            const searchButton = document.getElementById('button-search');
            const categoryFilter = document.getElementById('categoryFilter');
            const sortOrder = document.getElementById('sortOrder');
            const serviceList = document.getElementById('serviceList');
            const serviceCards = Array.from(document.querySelectorAll('.service-card'));

            const paginationControls = document.getElementById('paginationControls');
            const pageSize = 6;
            let currentPage = 1;
            let currentFilteredCards = [];

            function renderPagination() {
                paginationControls.innerHTML = '';

                const totalPages = Math.ceil(currentFilteredCards.length / pageSize);

                if (currentFilteredCards.length === 0 || totalPages <= 1) {
                    return;
                }

                const prevDisabled = currentPage === 1 ? 'disabled' : '';
                paginationControls.innerHTML += `<li class="page-item ${prevDisabled}">
                    <a class="page-link" href="#" data-page="${currentPage - 1}" aria-label="@Localizer["Предыдущая"].Value">@Localizer["Предыдущая"]</a>
                </li>`;

                let startPage = Math.max(1, currentPage - 2);
                let endPage = Math.min(totalPages, currentPage + 2);

                if (startPage > 1) {
                    paginationControls.innerHTML += `<li class="page-item"><a class="page-link" href="#" data-page="1">1</a></li>`;
                    if (startPage > 2) {
                        paginationControls.innerHTML += `<li class="page-item disabled"><span class="page-link">...</span></li>`;
                    }
                }

                for (let i = startPage; i <= endPage; i++) {
                    const activeClass = i === currentPage ? 'active' : '';
                    paginationControls.innerHTML += `<li class="page-item ${activeClass}">
                        <a class="page-link" href="#" data-page="${i}">${i}</a>
                    </li>`;
                }

                if (endPage < totalPages) {
                    if (endPage < totalPages - 1) {
                        paginationControls.innerHTML += `<li class="page-item disabled"><span class="page-link">...</span></li>`;
                    }
                    paginationControls.innerHTML += `<li class="page-item"><a class="page-link" href="#" data-page="${totalPages}">${totalPages}</a></li>`;
                }

                const nextDisabled = currentPage === totalPages ? 'disabled' : '';
                paginationControls.innerHTML += `<li class="page-item ${nextDisabled}">
                    <a class="page-link" href="#" data-page="${currentPage + 1}" aria-label="@Localizer["Следующая"].Value">@Localizer["Следующая"]</a>
                </li>`;

                paginationControls.querySelectorAll('.page-link').forEach(link => {
                    link.addEventListener('click', function (e) {
                        e.preventDefault();
                        const newPage = parseInt(this.dataset.page);
                        if (!isNaN(newPage) && newPage >= 1 && newPage <= totalPages) {
                            currentPage = newPage;
                            applyFiltersAndSorting();
                        }
                    });
                });
            }

            function applyFiltersAndSorting() {
                const searchTerm = searchInput.value.toLowerCase();
                const selectedCategory = categoryFilter.value;
                const currentSortOrder = sortOrder.value;

                let tempFilteredCards = serviceCards.filter(card => {
                    const serviceName = card.dataset.serviceName;
                    const serviceCategory = card.dataset.serviceCategory;

                    const matchesSearch = serviceName.includes(searchTerm);
                    const matchesCategory = selectedCategory === 'all' || serviceCategory === selectedCategory;

                    return matchesSearch && matchesCategory;
                });

                if (currentSortOrder === 'name_asc') {
                    tempFilteredCards.sort((a, b) => a.dataset.serviceName.localeCompare(b.dataset.serviceName));
                } else if (currentSortOrder === 'name_desc') {
                    tempFilteredCards.sort((a, b) => b.dataset.serviceName.localeCompare(a.dataset.serviceName));
                } else if (currentSortOrder === 'date_new') {
                    tempFilteredCards.sort((a, b) => {
                        const dateA = new Date(a.dataset.serviceCreatedAt);
                        const dateB = new Date(b.dataset.serviceCreatedAt);
                        return dateB - dateA;
                    });
                }

                currentFilteredCards = tempFilteredCards;

                const totalPages = Math.ceil(currentFilteredCards.length / pageSize);
                if (currentPage > totalPages && totalPages > 0) {
                    currentPage = totalPages;
                } else if (totalPages === 0) {
                    currentPage = 1;
                }

                const startIndex = (currentPage - 1) * pageSize;
                const endIndex = startIndex + pageSize;
                const cardsToDisplay = currentFilteredCards.slice(startIndex, endIndex);

                serviceList.innerHTML = '';
                if (cardsToDisplay.length > 0) {
                    cardsToDisplay.forEach(card => serviceList.appendChild(card));
                } else {
                    const noServicesMessage = `@Localizer["НетДоступныхУслуг"]`;
                    serviceList.innerHTML = `<div class="col-12 text-center py-5"><p class="lead text-muted">${noServicesMessage}</p></div>`;
                }

                renderPagination();
            }

            searchButton.addEventListener('click', applyFiltersAndSorting);
            searchInput.addEventListener('keyup', function (event) {
                applyFiltersAndSorting();
            });
            categoryFilter.addEventListener('change', applyFiltersAndSorting);
            sortOrder.addEventListener('change', applyFiltersAndSorting);

            applyFiltersAndSorting();
        });
    </script>
}